{"version":3,"file":"component---src-pages-index-jsx-e6006903accbc146b441.js","mappings":"+MAAA,EAAe,IAA0B,wDCAzC,EAAe,IAA0B,wDCAzC,EAAe,IAA0B,qDCgDzC,MA1CkB,KAChB,MAAM,EAACA,EAAU,EAACC,IAAgBC,EAAAA,EAAAA,WAAS,GACrCC,GAAWC,EAAAA,EAAAA,QAAO,IAAIC,MAAMC,IA4BlC,OAhBAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAc,KAElBL,EAASM,QAAQC,YAAc,EAC/BP,EAASM,QAAQE,MAAM,EAOzB,OAHAR,EAASM,QAAQG,iBAAiB,QAASJ,GAGpC,KACLL,EAASM,QAAQI,oBAAoB,QAASL,EAAY,CAC3D,GACA,IAGD,wBAAMM,MAAO,CAAEC,QAAS,OAAQC,cAAe,SAAUC,WAAY,SAAUC,UAAW,SAExF,uBAAKC,IAAKnB,EAAYoB,EAAWC,EAAUC,IAAI,YAAYR,MAAO,CAAES,OAAQ,OAAQC,aAAc,UAClG,2BACE,0BAAQC,QA/BK,KACbzB,GACFG,EAASM,QAAQiB,QACjBvB,EAASM,QAAQC,YAAc,GAE/BP,EAASM,QAAQE,OAEnBV,GAAcD,EAAU,EAwBSc,MAAO,CAAEa,YAAa,SAAW3B,EAAY,gBAAkB,cAC5F,0BAAQyB,QAAS,KAAOtB,EAASM,QAAQiB,QAASzB,GAAa,EAAM,GAAG,eAErE,EAMJ,MAAM2B,EAAO,IAAM,6BAAO,c","sources":["webpack://electrical-parade/./src/images/playIcon.webp","webpack://electrical-parade/./src/images/stopIcon.webp","webpack://electrical-parade/./src/pages/sample.mp3","webpack://electrical-parade/./src/pages/index.jsx"],"sourcesContent":["export default __webpack_public_path__ + \"static/playIcon-c8e6dc464af778faf8bb7a1f4cb950ff.webp\";","export default __webpack_public_path__ + \"static/stopIcon-e228f42c33921c871e39d7bb5ef7b56d.webp\";","export default __webpack_public_path__ + \"static/sample-46c59ae70f1fddc4e6b708e6957c651c.mp3\";","import React, { useState, useRef, useEffect } from \"react\";\nimport playIcon from \"../images/playIcon.webp\"; // プレイボタンのアイコン\nimport stopIcon from \"../images/stopIcon.webp\"; // ストップボタンのアイコン\nimport sampleMusic from \"./sample.mp3\"; // 音楽ファイルへの相対パスでインポート\n\n\nconst IndexPage = () => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const audioRef = useRef(new Audio(sampleMusic));\n\n  const togglePlay = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      audioRef.current.currentTime = 0;\n    } else {\n      audioRef.current.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n\n  useEffect(() => {\n    const handleEnded = () => {\n      // 音楽が終了したら再生を最初から開始する\n      audioRef.current.currentTime = 0;\n      audioRef.current.play();\n    };\n\n    // イベントリスナーを追加して、音楽が終了したときにhandleEnded関数を呼び出す\n    audioRef.current.addEventListener(\"ended\", handleEnded);\n\n    // コンポーネントがアンマウントされるときにイベントリスナーを削除する\n    return () => {\n      audioRef.current.removeEventListener(\"ended\", handleEnded);\n    };\n  }, []);\n\n  return (\n    <main style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", marginTop: \"50px\" }}>\n      {/* アイコン画像を表示する */}\n      <img src={isPlaying ? stopIcon : playIcon} alt=\"Play/Stop\" style={{ height: \"20vh\", marginBottom: \"20px\" }} />\n      <div>\n        <button onClick={togglePlay} style={{ marginRight: \"10px\" }}>{isPlaying ? \"Restart Music\" : \"Play Music\"}</button>\n        <button onClick={() => {audioRef.current.pause(); setIsPlaying(false)}}>Stop Music</button>\n      </div>\n    </main>\n  );\n};\n\nexport default IndexPage;\n\nexport const Head = () => <title>エレクトリカルパレード</title>;\n\n"],"names":["isPlaying","setIsPlaying","useState","audioRef","useRef","Audio","sampleMusic","useEffect","handleEnded","current","currentTime","play","addEventListener","removeEventListener","style","display","flexDirection","alignItems","marginTop","src","stopIcon","playIcon","alt","height","marginBottom","onClick","pause","marginRight","Head"],"sourceRoot":""}